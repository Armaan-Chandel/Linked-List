/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* fun(ListNode* cur,ListNode* end){
        ListNode* prev=NULL;
        while(cur!=end){
            ListNode* fo=cur->next;
            cur->next=prev;
            prev=cur;
            cur=fo;
        }
        return prev;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        int n=0;
        if(k==1){
            return head;
        }
        ListNode* a=head;
        if(k==n){
            return fun(a,NULL);
        }
        
        while(a!=NULL){
            a=a->next;
            n++;
           
                                                                                    
        }
        if(n<k){
            return head;
        }
        a=head;
        ListNode* lol=head;
        ListNode* cur=head;
        int count=0;
        vector<ListNode*> arr;
        while(lol!=NULL){
            lol=lol->next;
            count++;
            if(count==k){
                ListNode* ha=fun(cur,lol);
                arr.push_back(ha);
                cur=lol;
                n-=count;
                count=0;     
            }
            if(n<k){
                arr.push_back(cur);
                break;
            }
        }
        ListNode* ans=new ListNode(-1);
        ListNode* hmm=ans;
        for(int i=0;i<arr.size();i++){
            ListNode* ac=arr[i];
            while(ac!=nullptr){

                ListNode* temp=new ListNode(ac->val);
                ans->next=temp;
                ans=temp;
                ac=ac->next;
            }
        }    
        return hmm->next;
    }
};
